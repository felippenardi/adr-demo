* use $watch to update service.data when data changes
  - call service.add on add
  - call service.update on update
  - call service.delete on delete

* notes
  - resolve - does not need to set data on the controller.  it just needs to load the data.  the directives will get the data from the models as needed.  the resolved data is just to get the data cached for each model before the controller loads.

  - editor directive

<adr-notes-editor ng-if="block.editor" args=block.editor></adr-notes-editor>

  - block directive
    - makes the category directive obsolete

<adr-notes-note ng-if="block.name='category'" notes in notes | filter:{'category':block.args.categoryId}> </adr-notes-note>

<adr-notes-note ng-if="block.name='offersByIssue'" notes in notes | offersByIssue:33> </adr-notes-note>

  - party directive


Services


----

* checkInternetConnection
* data services
* each service should ...
  - cache the data once requested in service.data
  - requesting the list should check the cache first
  - posting should check for connection
    - if available then post to svr
    - if not available then store using localforage
  - get should get from the cache, not make an individual request to the rest svc

* error handling

Directives
----
* resolve service.list
* 


UX
----

* lazy loading
  - https://oclazyload.readme.io/
  - https://egghead.io/lessons/angularjs-lazy-loading-modules-with-ui-router-and-oclazyload
* add spinners while data loads - find angular wrapper for spin.js
* implement transition animations
