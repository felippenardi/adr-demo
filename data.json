note schema
-----------

// denormalizing the note by adding things like caucus & filters
// to make the ui easier to code.
// data is what's actually saved to the database
{
	data: {
		id
		synced: bool
		created: datetime
		category_id: key
		party_id: key
		attendee_id: key
		linked: bool // to other notes
		offer: bool // offer to issue or issue with offer
	},
	caucus: {
		caucus: bool
		visible: bool (if caucus toggled to hide)
		private: bool
	},
	filters: {
		...	

	},
	ui: {

		hover: bool
	},
	links: [
		{
			link_id: key,
			title: string
		},
		{}
	],
	resolutions: [
		{
			offer_id: key,
			issue_id: key,
			issue_name: string
		}
	]
}

**/

column schema
-------------

{	
	id: int,
	content_type: [false, 'category', 'party', 'group', ...],
	content_id: key, to (category, party, etc), default=false,
	span: int,
	focus: bool, // notes will be taken in the focused column, only one column can be in focus at a time
	sort: int, default=0,
	synced: bool
	
}
	

column_block schema
-------------------

// permits splitting columns for more complex layouts (resolve issue mode)

{

	id: int,
	column_id: key,
	sort: int, default=0,
	content_type: [false, 'category', 'party', 'group', ...],
	content_id: key, to (category, party, etc), default=false,
	sort: int, default=0,
	synced: bool
	
}

tags = [
	{
		id: 123,
		name: proposal,
		priority: 2 // default sort,
		sort: 3 // overrides priority
		visible: true // tag col is displayed
		isActive: true // focus is here so typing puts note here
	}, ...
]

notes = [
	{
		text: adfasdf,
		tag_id: proposal, # apply filter to put notes in col
		timestamp: ...
		groups: [a, b, c],
		selected: true, # for grouping
		caucus: false
	},
	{
		caucus: true,
		parties: [...]
		begin: ...,
		end: ...,
		notes: [...]
	}
]

// alternative without nesting notes within
// a caucus
notes = [
	{
		text: adfasdf,
		tag: proposal, # apply filter to put notes in col
		timestamp: ...
		groups: [a, b, c],
		selected: true, # for grouping
		caucus: false
	},
	{
		caucus: begin,
		begin: timestamp
		parties: [...]
	},
	{ note }, // note taken during caucus
	{ note }, // note taken during caucus
	{
		caucus: end
		timestamp: ...
	}
]

// alternative: notes with caucus_start, caucus_end attributes
notes = [
	{
		text: adfasdf,
		tag: proposal, # apply filter to put notes in col
		timestamp: ...
		groups: [a, b, c],
		selected: true, # for grouping
		caucus: false
	},
	{
		text: adfasdf,
		tag: proposal, # apply filter to put notes in col
		timestamp: ...
		groups: [a, b, c],
		selected: true, # for grouping
		caucus_start: timestamp, // uniquely id's the caucus
		caucus_end: timestamp
		caucus_parties: [...]
	},
]


// finally, create an array of caucus objects that can be referenced
// within notes

caucuses = [
	{

		id: asdfadsf,
		parties: [...]
		start: timestamp
		end: timestamp
	}
]

notes = [
	{
		text: adfasdf,
		tag: proposal, # apply filter to put notes in col
		timestamp: ...
		groups: [a, b, c],
		selected: true, # for grouping
		caucus: 0
	},
	{
		text: adfasdf,
		tag: proposal, # apply filter to put notes in col
		timestamp: ...
		groups: [a, b, c],
		selected: true, # for grouping
		caucus: caucus_id
	},
]

// just some ideas for convenience
selected_notes = [
	noteid, noteid, noteid, ...
]
	
linked_notes = {
	link_name: summer camp,
	notes: [id, id, id]
}

resolutions = {
	issue1: [proposalA, proposalB],
	issue2: [proposalB, proposalC]
}
