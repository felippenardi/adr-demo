
comments: https://github.com/johnpapa/angular-styleguide
- @namespace & @memberOf to match app structure

notesModel
- remove all methods that can be replaced by filters

file organization
- move html & css files into app directory 
- mv js into scripts directory under app

LinkingModal - rename the to something less generic (its currantly modalCtrl)

lodash.service
- append a function _.isService() that I can use to test that the service is being used in place of the window._

general bound function definitions
- alphabetize bound functions @ top of module
- list all bound functions as references to the declaration down the page
place inline filters in angular filters

----- next round of refactoring -----

https://github.com/johnpapa/angular-styleguide
- left off - https://github.com/johnpapa/angular-styleguide#style-y230

move columnsModel into notes module since its only used there

controller loading
- activate() or state.resolve()
    - activate() - https://github.com/johnpapa/angular-styleguide#style-y080
        - if I don't need to cancel the route when something goes wrong
    - state.resolve (i'm currently doing it this way)
    - I wonder if I can us a combination
- state.resolve
  - move function declarations to bottom of file and be sure to use @ngInject
    - https://github.com/johnpapa/angular-styleguide#style-y081


Module dependency best practices
- https://github.com/johnpapa/angular-styleguide#style-y165
- adr.module.js - list all common module dependencies & feature module dependencies
  - app.core is an example of a shared module
  - serves as a manifest for application features
  - no need to include vendor or cross app modules here
- component.module.js - list all dependencies (local manifest)
- core.module.js - contains dependencies for
  - makes it easy to share data services with modules so that feature module just depends on core.module as opposed to each individual service

modalCtrl
- not sure where to put this code
  - perhaps notes/linkings/linkings.ctrl.js & notes/linkings/linkings.html
  - ask on SO

remove lodash.js since its so ubiquitous that it doesn't really need to be wrapped in a service & I can't simply inject because it will break restangular

Exception Handling: https://github.com/johnpapa/angular-styleguide#style-y196

Testing
- alleviate globals for jsHing: https://github.com/johnpapa/angular-styleguide#style-y196

Return a promise from data calls - https://github.com/johnpapa/angular-styleguide#style-y061

move components into components directory

create a layout folder for layout components (may be overkill) - https://github.com/johnpapa/angular-styleguide#style-y151

look @ Breeze to replace current models: http://www.getbreezenow.com/breezejs

Logging - http://www.bennadel.com/blog/2542-logging-client-side-errors-with-angularjs-and-stacktrace-js.htm

Automated Tests
use https://www.npmjs.com/package/karma-ng-json2js-preprocessor for json fixtures in unit tests

ng-annotate
- add ng-strict-di directive to ngApp element so that Angular fails when manual injector annotations are not present - I will need to run ngAnnotate to annotate all of my files first.  This is what prevents my code from breaking once minified.

Gulp or Grunt
- ng-annotate
  - https://github.com/johnpapa/angular-styleguide#style-y101
- jslint
- jsdoc
- uglifyjs
- minify


----- Production -----

https://docs.angularjs.org/guide/production
Test code - use gulp to separating out spec files
uninstall json prettifier
